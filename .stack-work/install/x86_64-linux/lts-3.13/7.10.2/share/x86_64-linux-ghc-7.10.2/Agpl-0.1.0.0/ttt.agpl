import Agpl_lib

TicTacToe: Game

Gamestate: {
           Board: {Matrix[3][3]}
           Piece: {X | O}
}

Player: {PX | PO}

Move: {(Int, Int)}
isValid: { (\(Move (i, j)) -> ((inBounds (i,j)) && (isEmpty (i,j) game)))}

-- isValid: { inBounds move && isEmpty move }


possMoves: {mfold (\((i, j), piece, acc) -> if piece == Nil then (Move(i, j):acc)
                                                        else acc) [] (board game)}

outcome: {
         winCondition: { (inRowColOrDiag 3 PX (board game)) || (inRowColOrDiag 3 PO (board game))}
         tieCondition: {(trace "checking for tie" (isFull (board game)))}
         else: {(trace "placing" (place game (playerToPiece (currentTurn game)) (mtoc move)))}
         }




initialState:{Board: {all Nil}
              Turn: {PX}}
--Board: <<matrix 3 3 (\(i,j) -> Nil)>>
--Board: {all Nil}
--Board: {[[Nil, Nil, Nil],
--         [Nil, Nil, Nil],
--         [Nil, Nil, Nil]]}          

fromString: {\(s) -> let move = L.map read (splitOn "," s) in (Move ((L.head move), (L.head (L.tail move))))}

$
pieceToPlayer :: Piece -> Player
pieceToPlayer X = PX
pieceToPlayer O = PO
playerToPiece :: Player -> Piece
playerToPiece PX = X
playerToPiece PO = O
mtoc :: Move -> (Int, Int)
mtoc (Move c) = c
$

