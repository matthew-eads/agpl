Main.hs:1:1: Splicing declarations
    "connect4.agpl"
  ======>
    [isFull b
       = mfold
           (\ ((i, j), piece, acc)
              -> if piece == Nil then False else (True && acc))
           True
           b,
     xor :: Bool -> Bool -> Bool,
     xor True True = False
     xor False False = False
     xor _ _ = True,
     iToC :: Int -> Int -> Int -> (Int, Int),
     iToC rows cols i
       = if cols > rows then
             let
               c = if (i `mod` cols) == 0 then cols else (i `mod` cols)
               r = ceiling ((realToFrac (i - c)) / (realToFrac cols))
               r2 = if r == 0 then 1 else r + 1
             in (r2, c)
         else
             let
               c = if (i `mod` cols) == 0 then cols else (i `mod` cols)
               r = ceiling ((realToFrac (i - c)) / (realToFrac cols))
               r2 = if r == 0 then 1 else r + 1
             in (r2, c),
     lfoldi ::
       forall a b.
       (Int -> (Int, Int))
       -> Int -> (((Int, Int), a, b) -> b) -> b -> [a] -> b,
     lfoldi toC i f b [] = b
     lfoldi toC i f b (x ghc-prim-0.4.0.0:GHC.Types.: xs)
       = f ((toC i), x, (lfoldi toC (i - 1) f b xs)),
     mfold ::
       forall a b. (((Int, Int), a, b) -> b) -> b -> Matrix a -> b,
     mfold f b m
       = let
           nr = (nrows m)
           nc = (ncols m)
           l = (M.toList m)
         in lfoldi (iToC nr nc) (L.length l) f b l,
     inRow :: Int -> Player -> Board -> Bool,
     inRow n player board
       = let
           piece = playerToPiece player :: Piece
           rows = toLists board :: [[Piece]]
           frow
             = (\ c
                  -> (\ x
                        -> if c == n then c else if x == piece then (c + 1) else 0)) ::
                 Int -> Piece -> Int
           frows
             = (\ acc -> (\ row -> (foldl frow 0 row) >= n || acc)) ::
                 Bool -> [Piece] -> Bool
         in foldl frows False rows,
     inCol :: Int -> Player -> Board -> Bool,
     inCol n player board
       = let
           piece = playerToPiece player :: Piece
           cols = toLists (M.transpose board) :: [[Piece]]
           fcol
             = (\ c
                  -> (\ x
                        -> if c == n then c else if x == piece then (c + 1) else 0)) ::
                 Int -> Piece -> Int
           fcols
             = (\ acc -> (\ col -> (foldl fcol 0 col) >= n || acc)) ::
                 Bool -> [Piece] -> Bool
         in foldl fcols False cols,
     getDiags :: forall t. Matrix t -> [[t]],
     getDiags m
       = let
           k = (ncols m) + (nrows m)
           midi = (2 * k) - ((2 * (k - 1)) `div` 2) + 1
           diags = generate (2 * k) (\ _ -> empty)
         in
           V.toList
             (V.map
                V.toList
                (mfold
                   (\ ((i, j), elem, diagv)
                      -> let
                           subv = snoc (diagv V.! (i + j - 2)) elem
                           subv2 = snoc (diagv V.! (i - j + midi)) elem
                         in (diagv // [((i + j - 2), subv), ((i - j + midi), subv2)]))
                   diags
                   m)),
     inDiag :: Int -> Player -> Board -> Bool,
     inDiag n player board
       = let
           piece = playerToPiece player :: Piece
           diags = getDiags board :: [[Piece]]
           fdiag
             = (\ c
                  -> (\ x
                        -> if c == n then c else if x == piece then (c + 1) else 0)) ::
                 Int -> Piece -> Int
           fdiags
             = (\ acc -> (\ diag -> (foldl fdiag 0 diag) >= n || acc)) ::
                 Bool -> [Piece] -> Bool
         in (foldl fdiags False diags),
     inRowColOrDiag :: Int -> Player -> Board -> Bool,
     inRowColOrDiag n player board
       = (inDiag n player board) || inCol n player board
         || inRow n player board,
     data Piece
       = X | O | Nil
       deriving (Eq, Show),
     size = (7, 6), type Board = Matrix Piece,
     boardInitF = matrix 7 6 (\ (i, j) -> Nil), turn = PX,
     type Turn = Player,
     data Move
       = Move Int
       deriving (Eq, Show),
     data Player
       = PX | PO
       deriving (Eq, Show),
     otherPlayer PX = PO
     otherPlayer PO = PX,
     isValid
       = (\ game
            -> \ (Move i) -> (slot (board game) i) /= (negate 1, negate 1)) ::
           GameState -> Move -> Bool,
     data GameState
       = GameState {board :: Board, currentTurn :: Turn} |
         Win Player |
         Tie
       deriving (Show, Eq),
     elsec game move
       = (trace
            "placing"
            (place
               game
               (playerToPiece (currentTurn game))
               (slot (board game) (mtoc move)))),
     winc game
       = ((inRowColOrDiag 4 PX (board game))
          || inRowColOrDiag 4 PO (board game)),
     tiec game = (isFull (board game)),
     outcome game move
       = if (winc game) then
             (Win (currentTurn game), 1)
         else
             if (tiec game) then
                 (Tie, 1)
             else
                 let g = elsec game move
                 in
                   if (winc g) then
                       (Win (currentTurn game), 1)
                   else
                       if (tiec g) then (Tie, 1) else (g, 1),
     possMoves = (\ game -> undefined) :: GameState -> [Move],
     fromString = \ (s) -> Move (read s),
     slot :: Board -> Int -> (Int, Int),
     slot b i
       = let c = getRow i b
         in
           case V.elemIndex Nil c of {
             (Just j)
               -> (trace ("setting at index: " L.++ (show (i, j + 1))) (i, j + 1))
             (Nothing) -> (trace "fack" (negate 1, negate 1)) },
     mtoc :: Move -> Int, mtoc (Move c) = c,
     playerToPiece :: Player -> Piece,
     playerToPiece PX = X
     playerToPiece PO = O,
     inBounds_aVdx (x1_aVdy, y1_aVdz)
       = ((x1_aVdy <= 7)
          && ((x1_aVdy > 0) && ((y1_aVdz <= 6) && (y1_aVdz > 0)))),
     isEmpty (i, j) game = (((board game) M.! (i, j)) == Nil),
     place game piece coord
       = let
           b = setElem piece coord (board game)
           t = otherPlayer (currentTurn game)
         in GameState {board = b, currentTurn = t}]
