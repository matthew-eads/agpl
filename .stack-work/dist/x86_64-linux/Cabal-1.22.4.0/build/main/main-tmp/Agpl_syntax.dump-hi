
==================== FINAL INTERFACE ====================
2015-11-30 16:23:21.496421 UTC

interface main@main:Agpl_syntax 7102
  interface hash: 602e474630d9a831ccdae16bc31867f3
  ABI hash: d05bf7e6fa7fbb68e60c1d4d9bf005ed
  export-list hash: 4205051c493e95e2869d33ce21432354
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1e433d0ebc6754f04665631962e57d78
  sig of: Nothing
  used TH splices: False
  where
exports:
  Agpl_syntax.Board{Agpl_syntax.Array Agpl_syntax.Board Agpl_syntax.Matrix}
  Agpl_syntax.CustomDataType{Agpl_syntax.CustomDataType}
  Agpl_syntax.FromString{Agpl_syntax.FromString}
  Agpl_syntax.Game{Agpl_syntax.Game Agpl_syntax.NIL}
  Agpl_syntax.GameID
  Agpl_syntax.GameState{Agpl_syntax.GameState Agpl_syntax.board Agpl_syntax.hand Agpl_syntax.piece Agpl_syntax.turn}
  Agpl_syntax.InitState{Agpl_syntax.InitState Agpl_syntax.boardInit Agpl_syntax.turnInit}
  Agpl_syntax.IsValidFun{Agpl_syntax.IsValidFun}
  Agpl_syntax.Move{Agpl_syntax.Move}
  Agpl_syntax.OutcomeFun{Agpl_syntax.CustOutcomeFun Agpl_syntax.OutcomeFun Agpl_syntax.elsecon Agpl_syntax.tiecon Agpl_syntax.wincon}
  Agpl_syntax.Player{Agpl_syntax.Player}
  Agpl_syntax.PossMovesFun{Agpl_syntax.PMNil Agpl_syntax.PossMovesFun}
module dependencies:
package dependencies: base-4.8.1.0 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 template-haskell-2.10.0.0
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Monoid
                         base-4.8.1.0:Data.Type.Equality base-4.8.1.0:GHC.Generics
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  integer-gmp-1.0.0.0:GHC.Integer.Type bf9b4d13b1dbe96a83786d2e47d2e8ca
import  -/  template-haskell-2.10.0.0:Language.Haskell.TH.Syntax afcf64bad3773d231089a8ce432131ab
5a6575be8b22b0b0f59e88b700df439d
  $fShowBoard :: GHC.Show.Show Agpl_syntax.Board
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Agpl_syntax.Board
                  Agpl_syntax.$fShowBoard_$cshowsPrec
                  Agpl_syntax.$fShowBoard_$cshow
                  Agpl_syntax.$fShowBoard_$cshowList -}
5a6575be8b22b0b0f59e88b700df439d
  $fShowBoard1 :: Agpl_syntax.Board -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Agpl_syntax.Board ->
                 Agpl_syntax.$w$cshowsPrec 0 w) -}
55e9f7c85f131949e5ce53650e3bc2a6
  $fShowBoard2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Board "#) -}
4d882fd8f1ef69c6e26a3ac896e9a07f
  $fShowBoard3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Array "#) -}
f5db2f4c6cd9ea4d98a0ed4c1ec47d08
  $fShowBoard4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Matrix "#) -}
30fa41f2f21b66ccda61d1ba57664c5e
  $fShowBoard5 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5a6575be8b22b0b0f59e88b700df439d
  $fShowBoard_$cshow :: Agpl_syntax.Board -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ x :: Agpl_syntax.Board ->
                 case x of wild {
                   Agpl_syntax.Matrix b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Agpl_syntax.$fShowBoard4
                        (case b1 of ww { (,) ww1 ww2 ->
                         GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows9
                           (Language.Haskell.TH.Syntax.$w$cshowsPrec8
                              0
                              ww1
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showList__1
                                 (GHC.List.foldr1_$sfoldr1
                                    @ (GHC.Base.String -> GHC.Base.String)
                                    GHC.Show.$fShow(,)1
                                    (\ w4 :: GHC.Base.String ->
                                     case ww2 of ww4 { (,) ww5 ww6 ->
                                     GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.shows9
                                       (case GHC.Show.$w$cshowsPrec1
                                               0
                                               ww5
                                               (GHC.Types.:
                                                  @ GHC.Types.Char
                                                  GHC.Show.showList__1
                                                  (GHC.List.foldr1_$sfoldr1
                                                     @ (GHC.Base.String -> GHC.Base.String)
                                                     GHC.Show.$fShow(,)1
                                                     (\ w2 :: GHC.Base.String ->
                                                      case GHC.Show.$w$cshowsPrec1
                                                             0
                                                             ww6
                                                             w2 of ww7 { (#,#) ww3 ww8 ->
                                                      GHC.Types.: @ GHC.Types.Char ww3 ww8 })
                                                     (GHC.Types.[] @ GHC.Show.ShowS)
                                                     (GHC.Types.:
                                                        @ GHC.Types.Char
                                                        GHC.Show.shows8
                                                        w4))) of ww7 { (#,#) ww3 ww8 ->
                                        GHC.Types.: @ GHC.Types.Char ww3 ww8 }) })
                                    (GHC.Types.[] @ GHC.Show.ShowS)
                                    Agpl_syntax.$fShowBoard5))) })
                   Agpl_syntax.Array b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Agpl_syntax.$fShowBoard3
                        (case b1 of ww { (,) ww1 ww2 ->
                         GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows9
                           (Language.Haskell.TH.Syntax.$w$cshowsPrec8
                              0
                              ww1
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showList__1
                                 (GHC.List.foldr1_$sfoldr1
                                    @ (GHC.Base.String -> GHC.Base.String)
                                    GHC.Show.$fShow(,)1
                                    (\ w2 :: GHC.Base.String ->
                                     case GHC.Show.$w$cshowsPrec1 0 ww2 w2 of ww4 { (#,#) ww3 ww5 ->
                                     GHC.Types.: @ GHC.Types.Char ww3 ww5 })
                                    (GHC.Types.[] @ GHC.Show.ShowS)
                                    Agpl_syntax.$fShowBoard5))) })
                   Agpl_syntax.Board b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Agpl_syntax.$fShowBoard2
                        (Language.Haskell.TH.Syntax.$w$cshowsPrec8
                           11
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
5a6575be8b22b0b0f59e88b700df439d
  $fShowBoard_$cshowList :: [Agpl_syntax.Board] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Agpl_syntax.Board
                   Agpl_syntax.$fShowBoard1) -}
5a6575be8b22b0b0f59e88b700df439d
  $fShowBoard_$cshowsPrec ::
    GHC.Types.Int -> Agpl_syntax.Board -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Agpl_syntax.Board ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Agpl_syntax.$w$cshowsPrec ww1 w1 }) -}
91192d1ac1cebe57c987b47b377cf6bc
  $fShowCustomDataType :: GHC.Show.Show Agpl_syntax.CustomDataType
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Agpl_syntax.CustomDataType
                  Agpl_syntax.$fShowCustomDataType_$cshowsPrec
                  Agpl_syntax.$fShowCustomDataType_$cshow
                  Agpl_syntax.$fShowCustomDataType_$cshowList -}
91192d1ac1cebe57c987b47b377cf6bc
  $fShowCustomDataType1 ::
    Agpl_syntax.CustomDataType -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Agpl_syntax.CustomDataType ->
                 case w of ww { Agpl_syntax.CustomDataType ww1 ->
                 Agpl_syntax.$w$cshowsPrec1 0 ww1 }) -}
48fc7aa6f744c0679fd174e878443ae9
  $fShowCustomDataType2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CustomDataType "#) -}
91192d1ac1cebe57c987b47b377cf6bc
  $fShowCustomDataType_$cshow ::
    Agpl_syntax.CustomDataType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Agpl_syntax.CustomDataType ->
                 case x of wild { Agpl_syntax.CustomDataType b1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      Agpl_syntax.$fShowCustomDataType2)
                   (Language.Haskell.TH.Syntax.$w$cshowsPrec8
                      11
                      b1
                      (GHC.Types.[] @ GHC.Types.Char)) }) -}
91192d1ac1cebe57c987b47b377cf6bc
  $fShowCustomDataType_$cshowList ::
    [Agpl_syntax.CustomDataType] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Agpl_syntax.CustomDataType
                   Agpl_syntax.$fShowCustomDataType1) -}
91192d1ac1cebe57c987b47b377cf6bc
  $fShowCustomDataType_$cshowsPrec ::
    GHC.Types.Int -> Agpl_syntax.CustomDataType -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Agpl_syntax.CustomDataType ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Agpl_syntax.CustomDataType ww3 ->
                 Agpl_syntax.$w$cshowsPrec1 ww1 ww3 } }) -}
46199bec460db4ebc556e57dcb2854df
  $fShowFromString :: GHC.Show.Show Agpl_syntax.FromString
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Agpl_syntax.FromString
                  Agpl_syntax.$fShowFromString_$cshowsPrec
                  Agpl_syntax.$fShowFromString_$cshow
                  Agpl_syntax.$fShowFromString_$cshowList -}
46199bec460db4ebc556e57dcb2854df
  $fShowFromString1 :: Agpl_syntax.FromString -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Agpl_syntax.FromString ->
                 case w of ww { Agpl_syntax.FromString ww1 ->
                 Agpl_syntax.$w$cshowsPrec2 0 ww1 }) -}
439f154e528514c3c826007c26c95d6b
  $fShowFromString2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FromString "#) -}
46199bec460db4ebc556e57dcb2854df
  $fShowFromString_$cshow ::
    Agpl_syntax.FromString -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Agpl_syntax.FromString ->
                 case x of wild { Agpl_syntax.FromString b1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      Agpl_syntax.$fShowFromString2)
                   (Language.Haskell.TH.Syntax.$w$cshowsPrec5
                      11
                      b1
                      (GHC.Types.[] @ GHC.Types.Char)) }) -}
46199bec460db4ebc556e57dcb2854df
  $fShowFromString_$cshowList ::
    [Agpl_syntax.FromString] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Agpl_syntax.FromString
                   Agpl_syntax.$fShowFromString1) -}
46199bec460db4ebc556e57dcb2854df
  $fShowFromString_$cshowsPrec ::
    GHC.Types.Int -> Agpl_syntax.FromString -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Agpl_syntax.FromString ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Agpl_syntax.FromString ww3 ->
                 Agpl_syntax.$w$cshowsPrec2 ww1 ww3 } }) -}
82923e9d91bd4448ce090c8aed9c5a6a
  $fShowGame :: GHC.Show.Show Agpl_syntax.Game
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Agpl_syntax.Game
                  Agpl_syntax.$fShowGame_$cshowsPrec
                  Agpl_syntax.$fShowGame_$cshow
                  Agpl_syntax.$fShowGame_$cshowList -}
82923e9d91bd4448ce090c8aed9c5a6a
  $fShowGame1 :: Agpl_syntax.Game -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Agpl_syntax.$fShowGame_$cshowsPrec
                   Agpl_syntax.$fShowGame2) -}
42685064a07f06fd145dedaa3831499e
  $fShowGame2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
16deb5f1426ec569bd3815464085d553
  $fShowGameState :: GHC.Show.Show Agpl_syntax.GameState
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Agpl_syntax.GameState
                  Agpl_syntax.$fShowGameState_$cshowsPrec
                  Agpl_syntax.$fShowGameState_$cshow
                  Agpl_syntax.$fShowGameState_$cshowList -}
16deb5f1426ec569bd3815464085d553
  $fShowGameState1 :: Agpl_syntax.GameState -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Agpl_syntax.GameState ->
                 case w of ww { Agpl_syntax.GameState ww1 ww2 ww3 ww4 ->
                 Agpl_syntax.$w$cshowsPrec3 0 ww1 ww2 ww3 ww4 }) -}
3513a13191b205f106144e8c678fc8d9
  $fShowGameState2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
1af27f4ac8e822af963d62b39e68edee
  $fShowGameState3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "turn = "#) -}
bfb2742ef0614dcb577cfb432309e45a
  $fShowGameState4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "hand = "#) -}
15b9b60da12cc900463fef74639e9de5
  $fShowGameState5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "piece = "#) -}
68b73909caeaf8baaaa07dff42c59ac0
  $fShowGameState6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
5440821f9ec2edb0eb5928545312bcf6
  $fShowGameState7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "board = "#) -}
69c6d8ac11df2dbb7091de96a23d3fe5
  $fShowGameState8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GameState {"#) -}
16deb5f1426ec569bd3815464085d553
  $fShowGameState_$cshow :: Agpl_syntax.GameState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Agpl_syntax.GameState ->
                 Agpl_syntax.$fShowGameState_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
16deb5f1426ec569bd3815464085d553
  $fShowGameState_$cshowList ::
    [Agpl_syntax.GameState] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Agpl_syntax.GameState
                   Agpl_syntax.$fShowGameState1) -}
16deb5f1426ec569bd3815464085d553
  $fShowGameState_$cshowsPrec ::
    GHC.Types.Int -> Agpl_syntax.GameState -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Agpl_syntax.GameState ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Agpl_syntax.GameState ww3 ww4 ww5 ww6 ->
                 Agpl_syntax.$w$cshowsPrec3 ww1 ww3 ww4 ww5 ww6 } }) -}
82923e9d91bd4448ce090c8aed9c5a6a
  $fShowGame_$cshow :: Agpl_syntax.Game -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Agpl_syntax.Game ->
                 Agpl_syntax.$fShowGame_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
82923e9d91bd4448ce090c8aed9c5a6a
  $fShowGame_$cshowList :: [Agpl_syntax.Game] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Agpl_syntax.Game
                   Agpl_syntax.$fShowGame1) -}
82923e9d91bd4448ce090c8aed9c5a6a
  $fShowGame_$cshowsPrec ::
    GHC.Types.Int -> Agpl_syntax.Game -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
cabb4e294e2b8e5dc26f9253eb649cb2
  $fShowInitState :: GHC.Show.Show Agpl_syntax.InitState
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Agpl_syntax.InitState
                  Agpl_syntax.$fShowInitState_$cshowsPrec
                  Agpl_syntax.$fShowInitState_$cshow
                  Agpl_syntax.$fShowInitState_$cshowList -}
cabb4e294e2b8e5dc26f9253eb649cb2
  $fShowInitState1 :: Agpl_syntax.InitState -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Agpl_syntax.InitState ->
                 case w of ww { Agpl_syntax.InitState ww1 ww2 ->
                 Agpl_syntax.$w$cshowsPrec4 0 ww1 ww2 }) -}
ad63c90140f20ca8644b70661ce9b896
  $fShowInitState2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "turnInit = "#) -}
f3dfe10f19f7b0e534183e3a3b31ec20
  $fShowInitState3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "boardInit = "#) -}
d5df7b1751bb5c17569292c1746b0e49
  $fShowInitState4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InitState {"#) -}
cabb4e294e2b8e5dc26f9253eb649cb2
  $fShowInitState_$cshow :: Agpl_syntax.InitState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Agpl_syntax.InitState ->
                 Agpl_syntax.$fShowInitState_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cabb4e294e2b8e5dc26f9253eb649cb2
  $fShowInitState_$cshowList ::
    [Agpl_syntax.InitState] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Agpl_syntax.InitState
                   Agpl_syntax.$fShowInitState1) -}
cabb4e294e2b8e5dc26f9253eb649cb2
  $fShowInitState_$cshowsPrec ::
    GHC.Types.Int -> Agpl_syntax.InitState -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Agpl_syntax.InitState ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Agpl_syntax.InitState ww3 ww4 ->
                 Agpl_syntax.$w$cshowsPrec4 ww1 ww3 ww4 } }) -}
0a680fb879788e9038046ed45ae15c01
  $fShowIsValidFun :: GHC.Show.Show Agpl_syntax.IsValidFun
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Agpl_syntax.IsValidFun
                  Agpl_syntax.$fShowIsValidFun_$cshowsPrec
                  Agpl_syntax.$fShowIsValidFun_$cshow
                  Agpl_syntax.$fShowIsValidFun_$cshowList -}
0a680fb879788e9038046ed45ae15c01
  $fShowIsValidFun1 :: Agpl_syntax.IsValidFun -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Agpl_syntax.IsValidFun ->
                 case w of ww { Agpl_syntax.IsValidFun ww1 ->
                 Agpl_syntax.$w$cshowsPrec5 0 ww1 }) -}
c29b0716c33c850af930b3ea523928fa
  $fShowIsValidFun2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IsValidFun "#) -}
0a680fb879788e9038046ed45ae15c01
  $fShowIsValidFun_$cshow ::
    Agpl_syntax.IsValidFun -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Agpl_syntax.IsValidFun ->
                 case x of wild { Agpl_syntax.IsValidFun b1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      Agpl_syntax.$fShowIsValidFun2)
                   (Language.Haskell.TH.Syntax.$w$cshowsPrec5
                      11
                      b1
                      (GHC.Types.[] @ GHC.Types.Char)) }) -}
0a680fb879788e9038046ed45ae15c01
  $fShowIsValidFun_$cshowList ::
    [Agpl_syntax.IsValidFun] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Agpl_syntax.IsValidFun
                   Agpl_syntax.$fShowIsValidFun1) -}
0a680fb879788e9038046ed45ae15c01
  $fShowIsValidFun_$cshowsPrec ::
    GHC.Types.Int -> Agpl_syntax.IsValidFun -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Agpl_syntax.IsValidFun ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Agpl_syntax.IsValidFun ww3 ->
                 Agpl_syntax.$w$cshowsPrec5 ww1 ww3 } }) -}
8b522c55ef1479ecee50454e18a45c6c
  $fShowMove :: GHC.Show.Show Agpl_syntax.Move
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Agpl_syntax.Move
                  Agpl_syntax.$fShowMove_$cshowsPrec
                  Agpl_syntax.$fShowMove_$cshow
                  Agpl_syntax.$fShowMove_$cshowList -}
8b522c55ef1479ecee50454e18a45c6c
  $fShowMove1 :: Agpl_syntax.Move -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Agpl_syntax.Move ->
                 case w of ww { Agpl_syntax.Move ww1 ->
                 Agpl_syntax.$w$cshowsPrec6 0 ww1 }) -}
87c7d1439901a66fa0f08988a322bdd0
  $fShowMove2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Move "#) -}
8b522c55ef1479ecee50454e18a45c6c
  $fShowMove_$cshow :: Agpl_syntax.Move -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Agpl_syntax.Move ->
                 case x of wild { Agpl_syntax.Move b1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Agpl_syntax.$fShowMove2)
                   (Language.Haskell.TH.Syntax.$w$cshowsPrec8
                      11
                      b1
                      (GHC.Types.[] @ GHC.Types.Char)) }) -}
8b522c55ef1479ecee50454e18a45c6c
  $fShowMove_$cshowList :: [Agpl_syntax.Move] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Agpl_syntax.Move
                   Agpl_syntax.$fShowMove1) -}
8b522c55ef1479ecee50454e18a45c6c
  $fShowMove_$cshowsPrec ::
    GHC.Types.Int -> Agpl_syntax.Move -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Agpl_syntax.Move ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Agpl_syntax.Move ww3 ->
                 Agpl_syntax.$w$cshowsPrec6 ww1 ww3 } }) -}
70f074be50c0a288868c104210a20e93
  $fShowOutcomeFun :: GHC.Show.Show Agpl_syntax.OutcomeFun
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Agpl_syntax.OutcomeFun
                  Agpl_syntax.$fShowOutcomeFun_$cshowsPrec
                  Agpl_syntax.$fShowOutcomeFun_$cshow
                  Agpl_syntax.$fShowOutcomeFun_$cshowList -}
70f074be50c0a288868c104210a20e93
  $fShowOutcomeFun1 :: Agpl_syntax.OutcomeFun -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Agpl_syntax.OutcomeFun ->
                 Agpl_syntax.$w$cshowsPrec7 0 w) -}
4dcc3af5c2a26b8697982a0c09759576
  $fShowOutcomeFun2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "elsecon = "#) -}
e198c6869009b08cb81c1b03447e8ded
  $fShowOutcomeFun3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "tiecon = "#) -}
2ed5a2f66e79187d1dfc2980ec8a0984
  $fShowOutcomeFun4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "wincon = "#) -}
90913c29c60fd370bfc84ffca7210ab0
  $fShowOutcomeFun5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OutcomeFun {"#) -}
f987b76ad84478c7f90625b013513223
  $fShowOutcomeFun6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CustOutcomeFun "#) -}
70f074be50c0a288868c104210a20e93
  $fShowOutcomeFun_$cshow ::
    Agpl_syntax.OutcomeFun -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Agpl_syntax.OutcomeFun ->
                 Agpl_syntax.$fShowOutcomeFun_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
70f074be50c0a288868c104210a20e93
  $fShowOutcomeFun_$cshowList ::
    [Agpl_syntax.OutcomeFun] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Agpl_syntax.OutcomeFun
                   Agpl_syntax.$fShowOutcomeFun1) -}
70f074be50c0a288868c104210a20e93
  $fShowOutcomeFun_$cshowsPrec ::
    GHC.Types.Int -> Agpl_syntax.OutcomeFun -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Agpl_syntax.OutcomeFun ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Agpl_syntax.$w$cshowsPrec7 ww1 w1 }) -}
85c3d8138db63776e4a143f6c7901685
  $fShowPlayer :: GHC.Show.Show Agpl_syntax.Player
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Agpl_syntax.Player
                  Agpl_syntax.$fShowPlayer_$cshowsPrec
                  Agpl_syntax.$fShowPlayer_$cshow
                  Agpl_syntax.$fShowPlayer_$cshowList -}
85c3d8138db63776e4a143f6c7901685
  $fShowPlayer1 :: Agpl_syntax.Player -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Agpl_syntax.Player w1 :: GHC.Base.String ->
                 case w of ww { Agpl_syntax.Player ww1 ->
                 Agpl_syntax.$w$cshowsPrec8 0 ww1 w1 }) -}
8ec9a5164b41e9ce140af67f54b4c6d0
  $fShowPlayer2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Player "#) -}
85c3d8138db63776e4a143f6c7901685
  $fShowPlayer_$cshow :: Agpl_syntax.Player -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U,U(U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Agpl_syntax.Player ->
                 Agpl_syntax.$fShowPlayer_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
85c3d8138db63776e4a143f6c7901685
  $fShowPlayer_$cshowList :: [Agpl_syntax.Player] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Agpl_syntax.Player
                   Agpl_syntax.$fShowPlayer1) -}
85c3d8138db63776e4a143f6c7901685
  $fShowPlayer_$cshowsPrec ::
    GHC.Types.Int -> Agpl_syntax.Player -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U(1*U,U(U)))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: Agpl_syntax.Player
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Agpl_syntax.Player ww3 ->
                 Agpl_syntax.$w$cshowsPrec8 ww1 ww3 w2 } }) -}
50c820c9396d9c7dfcd245c39b536489
  $fShowPossMovesFun :: GHC.Show.Show Agpl_syntax.PossMovesFun
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Agpl_syntax.PossMovesFun
                  Agpl_syntax.$fShowPossMovesFun_$cshowsPrec
                  Agpl_syntax.$fShowPossMovesFun_$cshow
                  Agpl_syntax.$fShowPossMovesFun_$cshowList -}
50c820c9396d9c7dfcd245c39b536489
  $fShowPossMovesFun1 :: Agpl_syntax.PossMovesFun -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Agpl_syntax.$fShowPossMovesFun_$cshowsPrec
                   Agpl_syntax.$fShowGame2) -}
2b5f95c98f496700f1aa412ea0539dc4
  $fShowPossMovesFun2 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Agpl_syntax.$fShowPossMovesFun3) -}
3ac53cf3c4732026834b5e87da906880
  $fShowPossMovesFun3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PMNil"#) -}
182b6bb9639693077ee04c1a31d2e251
  $fShowPossMovesFun4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PossMovesFun "#) -}
50c820c9396d9c7dfcd245c39b536489
  $fShowPossMovesFun_$cshow ::
    Agpl_syntax.PossMovesFun -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ x :: Agpl_syntax.PossMovesFun ->
                 case x of wild {
                   Agpl_syntax.PossMovesFun b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Agpl_syntax.$fShowPossMovesFun4
                        (Language.Haskell.TH.Syntax.$w$cshowsPrec5
                           11
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   Agpl_syntax.PMNil -> Agpl_syntax.$fShowPossMovesFun3 }) -}
50c820c9396d9c7dfcd245c39b536489
  $fShowPossMovesFun_$cshowList ::
    [Agpl_syntax.PossMovesFun] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Agpl_syntax.PossMovesFun
                   Agpl_syntax.$fShowPossMovesFun1) -}
50c820c9396d9c7dfcd245c39b536489
  $fShowPossMovesFun_$cshowsPrec ::
    GHC.Types.Int -> Agpl_syntax.PossMovesFun -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ a :: GHC.Types.Int ds :: Agpl_syntax.PossMovesFun ->
                 case ds of wild {
                   Agpl_syntax.PossMovesFun b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.Haskell.TH.Syntax.$w$cshowsPrec5 11 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++ @ GHC.Types.Char Agpl_syntax.$fShowPossMovesFun4 (g x1)
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Agpl_syntax.$fShowPossMovesFun4
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1))) } }
                   Agpl_syntax.PMNil -> Agpl_syntax.$fShowPossMovesFun2 }) -}
5a6575be8b22b0b0f59e88b700df439d
  $w$cshowsPrec ::
    GHC.Prim.Int# -> Agpl_syntax.Board -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# w :: Agpl_syntax.Board ->
                 case w of wild {
                   Agpl_syntax.Matrix b1
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Agpl_syntax.$fShowBoard4
                            (case b1 of ww1 { (,) ww2 ww3 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows9
                               (Language.Haskell.TH.Syntax.$w$cshowsPrec8
                                  0
                                  ww2
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.showList__1
                                     (GHC.List.foldr1_$sfoldr1
                                        @ (GHC.Base.String -> GHC.Base.String)
                                        GHC.Show.$fShow(,)1
                                        (\ w4 :: GHC.Base.String ->
                                         case ww3 of ww4 { (,) ww5 ww6 ->
                                         GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows9
                                           (case GHC.Show.$w$cshowsPrec1
                                                   0
                                                   ww5
                                                   (GHC.Types.:
                                                      @ GHC.Types.Char
                                                      GHC.Show.showList__1
                                                      (GHC.List.foldr1_$sfoldr1
                                                         @ (GHC.Base.String -> GHC.Base.String)
                                                         GHC.Show.$fShow(,)1
                                                         (\ w2 :: GHC.Base.String ->
                                                          case GHC.Show.$w$cshowsPrec1
                                                                 0
                                                                 ww6
                                                                 w2 of ww7 { (#,#) ww8 ww9 ->
                                                          GHC.Types.: @ GHC.Types.Char ww8 ww9 })
                                                         (GHC.Types.[] @ GHC.Show.ShowS)
                                                         (GHC.Types.:
                                                            @ GHC.Types.Char
                                                            GHC.Show.shows8
                                                            w4))) of ww7 { (#,#) ww8 ww9 ->
                                            GHC.Types.: @ GHC.Types.Char ww8 ww9 }) })
                                        (GHC.Types.[] @ GHC.Show.ShowS)
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)))) })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }
                   Agpl_syntax.Array b1
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Agpl_syntax.$fShowBoard3
                            (case b1 of ww1 { (,) ww2 ww3 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows9
                               (Language.Haskell.TH.Syntax.$w$cshowsPrec8
                                  0
                                  ww2
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.showList__1
                                     (GHC.List.foldr1_$sfoldr1
                                        @ (GHC.Base.String -> GHC.Base.String)
                                        GHC.Show.$fShow(,)1
                                        (\ w2 :: GHC.Base.String ->
                                         case GHC.Show.$w$cshowsPrec1
                                                0
                                                ww3
                                                w2 of ww4 { (#,#) ww5 ww6 ->
                                         GHC.Types.: @ GHC.Types.Char ww5 ww6 })
                                        (GHC.Types.[] @ GHC.Show.ShowS)
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)))) })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }
                   Agpl_syntax.Board b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.Haskell.TH.Syntax.$w$cshowsPrec8 11 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> \ x :: GHC.Base.String ->
                           GHC.Base.++ @ GHC.Types.Char Agpl_syntax.$fShowBoard2 (g x)
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Agpl_syntax.$fShowBoard2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) } }) -}
2f303f396160629d5a9453d6d194ddff
  $w$cshowsPrec1 ::
    GHC.Prim.Int# -> Language.Haskell.TH.Syntax.Dec -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: Language.Haskell.TH.Syntax.Dec ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Language.Haskell.TH.Syntax.$w$cshowsPrec8 11 ww1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> \ x :: GHC.Base.String ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Agpl_syntax.$fShowCustomDataType2
                        (g x)
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Agpl_syntax.$fShowCustomDataType2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }) -}
16658c2b20e2183b4b902e5c23af4bb1
  $w$cshowsPrec2 ::
    GHC.Prim.Int# -> Language.Haskell.TH.Syntax.Exp -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: Language.Haskell.TH.Syntax.Exp ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Language.Haskell.TH.Syntax.$w$cshowsPrec5 11 ww1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> \ x :: GHC.Base.String ->
                      GHC.Base.++ @ GHC.Types.Char Agpl_syntax.$fShowFromString2 (g x)
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Agpl_syntax.$fShowFromString2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }) -}
caa5fcf77f4b000a994361d8dfa76da4
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Agpl_syntax.Board
    -> Language.Haskell.TH.Syntax.Dec
    -> Language.Haskell.TH.Syntax.Dec
    -> Language.Haskell.TH.Syntax.Dec
    -> GHC.Show.ShowS
  {- Arity: 5, Strictness: <L,U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: Agpl_syntax.Board
                   ww2 :: Language.Haskell.TH.Syntax.Dec
                   ww3 :: Language.Haskell.TH.Syntax.Dec
                   ww4 :: Language.Haskell.TH.Syntax.Dec ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = Agpl_syntax.$w$cshowsPrec 0 ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = Language.Haskell.TH.Syntax.$w$cshowsPrec8 0 ww2
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = Language.Haskell.TH.Syntax.$w$cshowsPrec8 0 ww3
                 } in
                 let {
                   f3 :: GHC.Base.String -> GHC.Base.String
                   = Language.Haskell.TH.Syntax.$w$cshowsPrec8 0 ww4
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Agpl_syntax.$fShowGameState8
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Agpl_syntax.$fShowGameState7
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Agpl_syntax.$fShowGameState6
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Agpl_syntax.$fShowGameState5
                                   (f1
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Agpl_syntax.$fShowGameState6
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            Agpl_syntax.$fShowGameState4
                                            (f2
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  Agpl_syntax.$fShowGameState6
                                                  (GHC.Base.++
                                                     @ GHC.Types.Char
                                                     Agpl_syntax.$fShowGameState3
                                                     (f3
                                                        (GHC.Base.++
                                                           @ GHC.Types.Char
                                                           Agpl_syntax.$fShowGameState2
                                                           x))))))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
83c8d64251602fef46576fc67dfba921
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> Language.Haskell.TH.Syntax.Exp
    -> Language.Haskell.TH.Syntax.Exp
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: Language.Haskell.TH.Syntax.Exp
                   ww2 :: Language.Haskell.TH.Syntax.Exp ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = Language.Haskell.TH.Syntax.$w$cshowsPrec5 0 ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = Language.Haskell.TH.Syntax.$w$cshowsPrec5 0 ww2
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Agpl_syntax.$fShowInitState4
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Agpl_syntax.$fShowInitState3
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Agpl_syntax.$fShowGameState6
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Agpl_syntax.$fShowInitState2
                                   (f1
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Agpl_syntax.$fShowGameState2
                                         x))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
285623db567d05e6b064eefae05e4520
  $w$cshowsPrec5 ::
    GHC.Prim.Int# -> Language.Haskell.TH.Syntax.Exp -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: Language.Haskell.TH.Syntax.Exp ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Language.Haskell.TH.Syntax.$w$cshowsPrec5 11 ww1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> \ x :: GHC.Base.String ->
                      GHC.Base.++ @ GHC.Types.Char Agpl_syntax.$fShowIsValidFun2 (g x)
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Agpl_syntax.$fShowIsValidFun2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }) -}
1d4ea4e9790041dd3be40c7449200744
  $w$cshowsPrec6 ::
    GHC.Prim.Int# -> Language.Haskell.TH.Syntax.Dec -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: Language.Haskell.TH.Syntax.Dec ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Language.Haskell.TH.Syntax.$w$cshowsPrec8 11 ww1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> \ x :: GHC.Base.String ->
                      GHC.Base.++ @ GHC.Types.Char Agpl_syntax.$fShowMove2 (g x)
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Agpl_syntax.$fShowMove2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }) -}
70f074be50c0a288868c104210a20e93
  $w$cshowsPrec7 ::
    GHC.Prim.Int# -> Agpl_syntax.OutcomeFun -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# w :: Agpl_syntax.OutcomeFun ->
                 case w of wild {
                   Agpl_syntax.CustOutcomeFun b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.Haskell.TH.Syntax.$w$cshowsPrec5 11 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> \ x :: GHC.Base.String ->
                           GHC.Base.++ @ GHC.Types.Char Agpl_syntax.$fShowOutcomeFun6 (g x)
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Agpl_syntax.$fShowOutcomeFun6
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }
                   Agpl_syntax.OutcomeFun b1 b2 b3
                   -> let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = Language.Haskell.TH.Syntax.$w$cshowsPrec5 0 b1
                      } in
                      let {
                        f1 :: GHC.Base.String -> GHC.Base.String
                        = Language.Haskell.TH.Syntax.$w$cshowsPrec5 0 b2
                      } in
                      let {
                        f2 :: GHC.Base.String -> GHC.Base.String
                        = Language.Haskell.TH.Syntax.$w$cshowsPrec5 0 b3
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Agpl_syntax.$fShowOutcomeFun5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               Agpl_syntax.$fShowOutcomeFun4
                               (f (GHC.Base.++
                                     @ GHC.Types.Char
                                     Agpl_syntax.$fShowGameState6
                                     (GHC.Base.++
                                        @ GHC.Types.Char
                                        Agpl_syntax.$fShowOutcomeFun3
                                        (f1
                                           (GHC.Base.++
                                              @ GHC.Types.Char
                                              Agpl_syntax.$fShowGameState6
                                              (GHC.Base.++
                                                 @ GHC.Types.Char
                                                 Agpl_syntax.$fShowOutcomeFun2
                                                 (f2
                                                    (GHC.Base.++
                                                       @ GHC.Types.Char
                                                       Agpl_syntax.$fShowGameState2
                                                       x)))))))))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) } }) -}
c39cf2cfe024884684f19afc23734514
  $w$cshowsPrec8 ::
    GHC.Prim.Int#
    -> (Language.Haskell.TH.Syntax.Dec, GHC.Types.Int)
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U(1*U,U(U))><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: (Language.Haskell.TH.Syntax.Dec, GHC.Types.Int)
                   w :: GHC.Base.String ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ x :: GHC.Base.String[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Agpl_syntax.$fShowPlayer2
                       (case ww1 of ww2 { (,) ww3 ww4 ->
                        GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.shows9
                          (Language.Haskell.TH.Syntax.$w$cshowsPrec8
                             0
                             ww3
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showList__1
                                (GHC.List.foldr1_$sfoldr1
                                   @ (GHC.Base.String -> GHC.Base.String)
                                   GHC.Show.$fShow(,)1
                                   (\ w2 :: GHC.Base.String ->
                                    case ww4 of ww5 { GHC.Types.I# ww6 ->
                                    case GHC.Show.$wshowSignedInt 0 ww6 w2 of ww7 { (#,#) ww8 ww9 ->
                                    GHC.Types.: @ GHC.Types.Char ww8 ww9 } })
                                   (GHC.Types.[] @ GHC.Show.ShowS)
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)))) })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w)) }) -}
5a6575be8b22b0b0f59e88b700df439d
  data Board
    = Matrix (Language.Haskell.TH.Syntax.Dec,
              (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer))
    | Array (Language.Haskell.TH.Syntax.Dec, GHC.Integer.Type.Integer)
    | Board Language.Haskell.TH.Syntax.Dec
91192d1ac1cebe57c987b47b377cf6bc
  data CustomDataType = CustomDataType Language.Haskell.TH.Syntax.Dec
46199bec460db4ebc556e57dcb2854df
  data FromString = FromString Language.Haskell.TH.Syntax.Exp
82923e9d91bd4448ce090c8aed9c5a6a
  data Game
    = Game (Agpl_syntax.GameID,
            Agpl_syntax.GameState,
            Agpl_syntax.Move,
            Agpl_syntax.IsValidFun,
            Agpl_syntax.PossMovesFun,
            Agpl_syntax.OutcomeFun,
            Agpl_syntax.InitState,
            Agpl_syntax.Player,
            Agpl_syntax.FromString,
            [Language.Haskell.TH.Syntax.Dec],
            [Language.Haskell.TH.Syntax.Dec])
    | NIL
00bf6901622b39d3e3fee26bf1d4a165
  type GameID = GHC.Base.String
16deb5f1426ec569bd3815464085d553
  data GameState
    = GameState {board :: Agpl_syntax.Board,
                 piece :: Language.Haskell.TH.Syntax.Dec,
                 hand :: Language.Haskell.TH.Syntax.Dec,
                 turn :: Language.Haskell.TH.Syntax.Dec}
cabb4e294e2b8e5dc26f9253eb649cb2
  data InitState
    = InitState {boardInit :: Language.Haskell.TH.Syntax.Exp,
                 turnInit :: Language.Haskell.TH.Syntax.Exp}
0a680fb879788e9038046ed45ae15c01
  data IsValidFun = IsValidFun Language.Haskell.TH.Syntax.Exp
8b522c55ef1479ecee50454e18a45c6c
  data Move = Move Language.Haskell.TH.Syntax.Dec
70f074be50c0a288868c104210a20e93
  data OutcomeFun
    = CustOutcomeFun Language.Haskell.TH.Syntax.Exp
    | OutcomeFun {wincon :: Language.Haskell.TH.Syntax.Exp,
                  tiecon :: Language.Haskell.TH.Syntax.Exp,
                  elsecon :: Language.Haskell.TH.Syntax.Exp}
85c3d8138db63776e4a143f6c7901685
  data Player
    = Player (Language.Haskell.TH.Syntax.Dec, GHC.Types.Int)
50c820c9396d9c7dfcd245c39b536489
  data PossMovesFun
    = PossMovesFun Language.Haskell.TH.Syntax.Exp | PMNil
9240c40287cbcd98ffb4cf595667777b
  board :: Agpl_syntax.GameState -> Agpl_syntax.Board
  RecSel Agpl_syntax.GameState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Agpl_syntax.GameState ->
                 case ds of wild { Agpl_syntax.GameState ds1 ds2 ds3 ds4 ->
                 ds1 }) -}
d73f6bbedaa8a4f24243b4d11e763ff7
  boardInit ::
    Agpl_syntax.InitState -> Language.Haskell.TH.Syntax.Exp
  RecSel Agpl_syntax.InitState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Agpl_syntax.InitState ->
                 case ds of wild { Agpl_syntax.InitState ds1 ds2 -> ds1 }) -}
e454c2e082ee75eece9bdc6d683beb9e
  elsecon :: Agpl_syntax.OutcomeFun -> Language.Haskell.TH.Syntax.Exp
  RecSel Agpl_syntax.OutcomeFun
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Agpl_syntax.OutcomeFun ->
                 case ds of wild {
                   Agpl_syntax.CustOutcomeFun ipv -> Agpl_syntax.elsecon1
                   Agpl_syntax.OutcomeFun ds1 ds2 ds3 -> ds3 }) -}
b3715190c73636217a6925ba029d894a
  elsecon1 :: Language.Haskell.TH.Syntax.Exp
  {- Strictness: b -}
eb19f0d1e86bff8e6fbbae71be517fdc
  hand :: Agpl_syntax.GameState -> Language.Haskell.TH.Syntax.Dec
  RecSel Agpl_syntax.GameState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Agpl_syntax.GameState ->
                 case ds of wild { Agpl_syntax.GameState ds1 ds2 ds3 ds4 ->
                 ds3 }) -}
f13a62b0bc85e116f4659bdc83150bab
  piece :: Agpl_syntax.GameState -> Language.Haskell.TH.Syntax.Dec
  RecSel Agpl_syntax.GameState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Agpl_syntax.GameState ->
                 case ds of wild { Agpl_syntax.GameState ds1 ds2 ds3 ds4 ->
                 ds2 }) -}
22591ef32f27ed01423a77d9450c45a8
  tiecon :: Agpl_syntax.OutcomeFun -> Language.Haskell.TH.Syntax.Exp
  RecSel Agpl_syntax.OutcomeFun
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Agpl_syntax.OutcomeFun ->
                 case ds of wild {
                   Agpl_syntax.CustOutcomeFun ipv -> Agpl_syntax.tiecon1
                   Agpl_syntax.OutcomeFun ds1 ds2 ds3 -> ds2 }) -}
d41ba30dc1f2bf16c016afa226df644b
  tiecon1 :: Language.Haskell.TH.Syntax.Exp
  {- Strictness: b -}
44783e2441694d687ced07df48f6d04d
  turn :: Agpl_syntax.GameState -> Language.Haskell.TH.Syntax.Dec
  RecSel Agpl_syntax.GameState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Agpl_syntax.GameState ->
                 case ds of wild { Agpl_syntax.GameState ds1 ds2 ds3 ds4 ->
                 ds4 }) -}
305c3c20e7f6f2377ef9d171e6d9ab4a
  turnInit :: Agpl_syntax.InitState -> Language.Haskell.TH.Syntax.Exp
  RecSel Agpl_syntax.InitState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Agpl_syntax.InitState ->
                 case ds of wild { Agpl_syntax.InitState ds1 ds2 -> ds2 }) -}
b09fb148b335c3f24831da78114d198e
  wincon :: Agpl_syntax.OutcomeFun -> Language.Haskell.TH.Syntax.Exp
  RecSel Agpl_syntax.OutcomeFun
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Agpl_syntax.OutcomeFun ->
                 case ds of wild {
                   Agpl_syntax.CustOutcomeFun ipv -> Agpl_syntax.wincon1
                   Agpl_syntax.OutcomeFun ds1 ds2 ds3 -> ds1 }) -}
63556977e6fb143f6235458876d90979
  wincon1 :: Language.Haskell.TH.Syntax.Exp
  {- Strictness: b -}
instance GHC.Show.Show [Agpl_syntax.Board]
  = Agpl_syntax.$fShowBoard
instance GHC.Show.Show [Agpl_syntax.CustomDataType]
  = Agpl_syntax.$fShowCustomDataType
instance GHC.Show.Show [Agpl_syntax.FromString]
  = Agpl_syntax.$fShowFromString
instance GHC.Show.Show [Agpl_syntax.Game] = Agpl_syntax.$fShowGame
instance GHC.Show.Show [Agpl_syntax.GameState]
  = Agpl_syntax.$fShowGameState
instance GHC.Show.Show [Agpl_syntax.InitState]
  = Agpl_syntax.$fShowInitState
instance GHC.Show.Show [Agpl_syntax.IsValidFun]
  = Agpl_syntax.$fShowIsValidFun
instance GHC.Show.Show [Agpl_syntax.Move] = Agpl_syntax.$fShowMove
instance GHC.Show.Show [Agpl_syntax.OutcomeFun]
  = Agpl_syntax.$fShowOutcomeFun
instance GHC.Show.Show [Agpl_syntax.Player]
  = Agpl_syntax.$fShowPlayer
instance GHC.Show.Show [Agpl_syntax.PossMovesFun]
  = Agpl_syntax.$fShowPossMovesFun
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

