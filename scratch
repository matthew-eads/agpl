we need to define a GameState data, different from that in Agpl_syntax

data GameState = GameState {board :: BDec, piece :: PDec, hand :: HDec, turn :: TDec, 
                            customData :: CDec}

DataD [] GameState [] [] []
[DataD [] GameState [] [RecC GameState [(board,NotStrict,ConT Board),(piece,NotStrict,ConT Piece)]] []]







user enters:
isValid: {\(player, i, j) -> (Game.Turn == player) && (i < 3) && (j < 3) &&
                         (i >= 0) && (j >= 0) && (Game.Board[i][j] == nil)}

:: Move -> Bool
in order to add the gamestate
Gamestate -> Move -> Bool
or even
Board -> Piece -> Turn -> Move -> Bool

so we just need to add, at the beginning of the function
\(game) ->
then we should be ok

in haskell, we can declare data Dog = Dog {name :: String, age :: Int}
and declare with diesel = Dog{name="diesel", age=10}
then access with (name diesel) and (age diesel)

so we can have
data Gamestate = Gamestate { board :: Board, piece :: Piece, turn :: Turn }
then in functions, replace Game.Turn (or whatever) with (turn game)


what about outcome
data Outcome = Fin(Player, Int) | Unfin(Player, Int) | None

fun outcome :: move -> Outcome

type Matrix = ST s (STArray s (Int, Int) Piece)

fun mfold f acc matrix :: (a -> Piece -> a) a Matrix -> a


nilParser should return: (DataD [] NULL [] [NormalC NULL []] [])

parsegamestate returns return GameState 
                           {board=btypedec, piece=ptypedec,
                            hand=htypedec, turn=ttypedec, 
                            customData=ctypedec};}
                 